{"version":3,"sources":["components/DataChart.js","components/Select.js","App.js","reportWebVitals.js","index.js"],"names":["DataChart","data","year","loading","optionsLine","console","log","options","chart","id","background","foreColor","xaxis","type","toolbar","autoSelected","show","stroke","width","curve","colors","tooltip","theme","fill","title","text","align","margin","offsetY","style","fontSize","length","className","series","height","React","memo","Select","userName","setUserName","yearHandler","clickHandle","initYear","currentYear","Date","getFullYear","loop","disabled","value","onChange","e","target","placeholder","htmlFor","onClick","Array","apply","map","item","index","optionsLineConst","brush","enabled","selection","min","getTime","max","color","grid","borderColor","yaxis","tickAmount","App","useState","name","setData","setYear","setInitYear","setLoading","setOptionsLine","useEffect","fetchActivity","url","dt","fetch","then","response","json","newarr","contributions","days","val","index2","ct","count","tmparr","toDateString","setDate","getDate","flat","Number","event","preventDefault","created_at","date","newArr","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.976f3a51.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chart from \"react-apexcharts\"\r\n\r\nfunction DataChart({data,year,loading,optionsLine}) {\r\n\tconsole.log(data,year)\r\n\tconst options = {\r\n\t\tchart:{\r\n\t\t\tid: 'chart2',\r\n\t\t\tbackground:\"\",\r\n\t\t\tforeColor:\"#fff\"\r\n\t\t},\r\n\t\txaxis:{\r\n\t\t\ttype:'datetime',\r\n\t\t\ttoolbar: {\r\n                autoSelected: 'pan',\r\n               \tshow: false\r\n            }\r\n\t\t},\r\n\t\tstroke: {\r\n            width: 3,\r\n            curve: 'smooth',\r\n            colors:[\"#1ba2f6\"]\r\n        },\r\n        tooltip:{\r\n        \ttheme:\"dark\"\r\n        },\r\n\t\tfill:{\r\n\t\t\ttype: 'solid',\r\n\t\t\tcolors:[\"#1ba2f6\"]\r\n\t\t},\r\n\t\ttitle:{\r\n\t\t\ttext:\"Github TimeLine\",\r\n\t\t\talign:'center',\r\n\t\t\tmargin:20,\r\n\t\t\toffsetY:20,\r\n\t\t\tstyle:{\r\n\t\t\t\tfontSize:'25px'\r\n\t\t\t}\r\n\t\t},\r\n\t}\r\n\t\r\n\r\n     \r\n            console.log(options,optionsLine)\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\t(loading)?<h1>Loading...</h1>\r\n\t\t\t\t:(data[0].data.length==0)?<h1>No Data Available</h1>\r\n\t\t\t\t:\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div id=\"wrapper\">\r\n\t\t\t\t\t<div id=\"chart-line2\">\r\n\t\t  <Chart className=\" card border-primary\" options={options} series={data} type=\"line\" height={300} />\r\n\t\t\t</div>\r\n\t\t\t  <div id=\"chart-line\">\r\n\t\t\t  <Chart className=\"card border-info mt-3\" options={optionsLine} series={data} type=\"area\" height={150} />\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</>\r\n\t\t\t}\r\n\t\t\t\r\n\t\t  </>\r\n\t)\r\n}\r\n\r\nexport default React.memo(DataChart)","import React from 'react'\r\n\r\nfunction Select({userName,setUserName, year,yearHandler, clickHandle, initYear}) {\r\n\tlet currentYear = new Date().getFullYear();\r\n\tconst loop = currentYear - initYear\r\n\tlet disabled = (initYear==0)?true:false;\r\n\treturn (\r\n\t\t<div className=\"mt-5 mb-5 text-container\">\r\n\t\t<div className=\"inputs-container\">\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t  <div className=\"form-floating mb-3\">\r\n\t\t\t    <input type=\"text\" value={userName} onChange={(e)=>setUserName(e.target.value)} className=\"form-control text-field\" id=\"floatingInput\" placeholder=\"jaypatel31\"/>\r\n\t\t\t    <label htmlFor=\"floatingInput\">Github User Name</label>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t\t  \r\n\t\t    <button onClick={clickHandle} type=\"button\" className=\"btn btn-outline-primary\" >Find</button>\r\n\t\t    </div>\r\n\t\t     <div className=\"form-group select-container\">\r\n\t\t      <label htmlFor=\"exampleSelect1\" className=\"form-label select-label\">Select Year</label>\r\n\t\t      <select disabled={disabled} value={year} onChange={(e)=>yearHandler(e.target.value)} className=\"form-select\" id=\"exampleSelect1\">\r\n\t\t        \r\n\t\t        {\r\n\t\t        \t(disabled==false)?\r\n\t\t        \tArray.apply(null,{length:loop+1}).map((item,index) => {\r\n\t\t        \t\treturn <option key={index} value={currentYear}>{currentYear--}</option>\r\n\t\t        \t}):\r\n\t\t        \t<option>Please Enter UserName</option>\r\n\t\t        }\r\n\t\t      </select>\r\n\t\t    </div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Select","import './App.css';\nimport DataChart from \"./components/DataChart\"\nimport React, {useState,useEffect} from \"react\";\nimport Select from \"./components/Select\"\n\nlet optionsLineConst = {\n              chart: {\n                id: 'chart1',\n                height: 230,\n                type: 'area',\n                background:\"\",\n                foreColor:\"#fff\",\n                brush:{\n                  target: 'chart2',\n                  enabled: true\n                },\n                selection: {\n                  enabled: true,\n                  xaxis: {\n                    min: new Date(`01 May ${new Date().getFullYear()}`).getTime(),\n                    max: new Date(`01 Jun ${new Date().getFullYear()}`).getTime()\n                  },\n                  fill:{\n                    color: '#6f42c1',\n                  }\n                  \n                },\n              },\n              grid:{\n                enabled:true,\n                 borderColor: '#FFFFFF',\n                 \n              },\n              colors: ['#FFFFFF'],\n              fill: {\n                colors: ['#FFFFFF'],\n              },\n              xaxis: {\n                type: 'datetime',\n                tooltip: {\n                  enabled: false\n                }\n              },\n              yaxis: {\n                tickAmount: 2\n              }\n            }\n\nfunction App() {\n  const [data, setData] = useState([{\n          name: new Date().getFullYear(),\n          data: []\n        }])\n  const [userName, setUserName] = useState(\"\")\n  const [year, setYear] = useState(0)\n  const [initYear, setInitYear] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [optionsLine, setOptionsLine] = useState(optionsLineConst)\n\n  useEffect(() => {\n    if(userName != \"\" && loading==true){\n      console.log(\"running\");\n      fetchActivity();\n    }\n  }, [loading])\n\n  const yearHandler = (val) =>{\n    setYear(Number(val));\n    setLoading(true);   \n  }\n\n  const clickHandle = (event) =>{\n    event.preventDefault();\n    if(userName != \"\"){\n      fetch(`https://api.github.com/users/${userName}`)\n        .then(response=>response.json())\n        .then(data=>{\n          if(data.created_at){\n            let date = new Date(`${data.created_at}`).getFullYear();\n            setInitYear(date);\n            setYear(new Date().getFullYear());\n            setLoading(true);\n          }\n          else{\n            setInitYear(0);\n            let newArr = [];\n            newArr[0] = {...data[0]};\n            newArr[0].data = [];\n            setData(newArr);\n          }\n        })\n    }\n  }\n\n  const fetchActivity = () =>{\n    const proxyurl = \"https://arcane-journey-48510.herokuapp.com/\";\n    const url = `https://skyline.github.com/${userName}/${year}.json`;\n    let dt = new Date(year,0);\n    fetch(proxyurl + url)\n      .then(response=>response.json())\n      .then(data=>{\n        console.log(data)\n        let newarr = data.contributions.map((item,index) => {\n            let beforArr = item.days.map((val,index2)=>{\n              let ct = val.count;\n              let tmparr = [dt.toDateString(),ct];\n              dt.setDate(dt.getDate()+1);\n              return tmparr\n            })\n            return beforArr;\n        })\n        setData([{...data[0],data:newarr.flat(1)}]);\n        optionsLineConst.chart.selection.xaxis.min = new Date(`01 May ${year}`).getTime();\n        optionsLineConst.chart.selection.xaxis.max = new Date(`01 Jun ${year}`).getTime();\n        setOptionsLine(optionsLineConst)\n        setLoading(false);\n      })\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Github Activity Viewer</h1>\n      <Select yearHandler={yearHandler} userName ={userName} setUserName={setUserName} year={year} setYear={setYear} clickHandle={clickHandle} initYear={initYear}/>\n      <DataChart data={data}  year={year} loading={loading} optionsLine={optionsLine}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}